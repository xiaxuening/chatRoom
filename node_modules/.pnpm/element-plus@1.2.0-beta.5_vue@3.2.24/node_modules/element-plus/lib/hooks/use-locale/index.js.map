{"version":3,"file":"index.js","sources":["../../../../../packages/hooks/use-locale/index.ts"],"sourcesContent":["import { computed, getCurrentInstance, inject, provide, ref, unref } from 'vue'\nimport get from 'lodash/get'\nimport English from '@element-plus/locale/lang/en'\nimport { buildProps, definePropType } from '@element-plus/utils/props'\nimport type { MaybeRef } from '@vueuse/core'\nimport type { InjectionKey, Ref } from 'vue'\nimport type { Language } from '@element-plus/locale'\n\nexport const useLocaleProps = buildProps({\n  locale: {\n    type: definePropType<Language>(Object),\n  },\n})\n\nexport type Translator = (path: string) => string\nexport type LocaleContext = {\n  locale: Ref<Language>\n  lang: Ref<string>\n  t: Translator\n}\n\nexport const localeContextKey: InjectionKey<LocaleContext> =\n  Symbol('localeContextKey')\n\n// this is meant to fix global methods like `ElMessage(opts)`, this way we can inject current locale\n// into the component as default injection value.\n// refer to: https://github.com/element-plus/element-plus/issues/2610#issuecomment-887965266\nlet localeContextCache: LocaleContext\n\nexport const provideLocale = () => {\n  const vm = getCurrentInstance()!\n  const props = vm.props as {\n    locale: Language\n  }\n  const locale = computed(() => props.locale || English)\n  const lang = computed(() => locale.value.name)\n\n  const t = buildTranslator(locale)\n  const provides: LocaleContext = {\n    locale,\n    lang,\n    t,\n  }\n\n  // this could be broken if someone tries to do following:\n\n  /**\n   * <config-provider :locale=\"lang1\">\n   *   <config-provider :locale=\"lang2\">\n   *     Something calls modal component.\n   *   </config-provider>\n   * </config-provider>\n   */\n  localeContextCache = provides\n  provide(localeContextKey, provides)\n}\n\nexport const buildTranslator =\n  (locale: MaybeRef<Language>): Translator =>\n  (path) =>\n    translate(path, unref(locale))\n\nexport const translate = (path: string, locale: Language): string =>\n  get(locale, path, '')\n\nexport const localeProviderMaker = (locale = English) => {\n  const lang = ref(locale.name)\n  const localeRef = ref(locale)\n  return {\n    lang,\n    locale: localeRef,\n    t: buildTranslator(localeRef),\n  }\n}\n\nexport const useLocale = () => {\n  return inject(\n    localeContextKey,\n    localeContextCache || localeProviderMaker(English)\n  )\n}\n"],"names":["buildProps","definePropType","getCurrentInstance","computed","English","unref","get","ref","inject"],"mappings":";;;;;;;;;;;;;MAQa,iBAAiBA,iBAAW;AAAA,EACvC,QAAQ;AAAA,IACN,MAAMC,qBAAyB;AAAA;AAAA;MAWtB,mBACX,OAAO;AAKT,IAAI;MAES,gBAAgB,MAAM;AACjC,QAAM,KAAKC;AACX,QAAM,QAAQ,GAAG;AAGjB,QAAM,SAASC,aAAS,MAAM,MAAM,UAAUC;AAC9C,QAAM,OAAOD,aAAS,MAAM,OAAO,MAAM;AAEzC,QAAM,IAAI,gBAAgB;AAC1B,QAAM,WAA0B;AAAA,IAC9B;AAAA,IACA;AAAA,IACA;AAAA;AAYF,uBAAqB;AACrB,cAAQ,kBAAkB;AAAA;MAGf,kBACX,CAAC,WACD,CAAC,SACC,UAAU,MAAME,UAAM;MAEb,YAAY,CAAC,MAAc,WACtCC,wBAAI,QAAQ,MAAM;MAEP,sBAAsB,CAAC,SAASF,kBAAY;AACvD,QAAM,OAAOG,QAAI,OAAO;AACxB,QAAM,YAAYA,QAAI;AACtB,SAAO;AAAA,IACL;AAAA,IACA,QAAQ;AAAA,IACR,GAAG,gBAAgB;AAAA;AAAA;MAIV,YAAY,MAAM;AAC7B,SAAOC,WACL,kBACA,sBAAsB,oBAAoBJ;AAAA;;;;;;;;;;"}