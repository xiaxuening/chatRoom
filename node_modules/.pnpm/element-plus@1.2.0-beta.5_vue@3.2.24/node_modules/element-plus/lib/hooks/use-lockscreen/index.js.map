{"version":3,"file":"index.js","sources":["../../../../../packages/hooks/use-lockscreen/index.ts"],"sourcesContent":["import { watch, isRef, onScopeDispose } from 'vue'\n\nimport getScrollBarWidth from '@element-plus/utils/scrollbar-width'\nimport { throwError } from '@element-plus/utils/error'\nimport {\n  addClass,\n  removeClass,\n  hasClass,\n  getStyle,\n} from '@element-plus/utils/dom'\n\nimport type { Ref } from 'vue'\n\n/**\n * Hook that monitoring the ref value to lock or unlock the screen.\n * When the trigger became true, it assumes modal is now opened and vice versa.\n * @param trigger {Ref<boolean>}\n */\nexport const useLockscreen = (trigger: Ref<boolean>) => {\n  if (!isRef(trigger)) {\n    throwError(\n      '[useLockscreen]',\n      'You need to pass a ref param to this function'\n    )\n  }\n  let scrollBarWidth = 0\n  let withoutHiddenClass = false\n  let bodyPaddingRight = '0'\n  let computedBodyPaddingRight = 0\n\n  const cleanup = () => {\n    removeClass(document.body, 'el-popup-parent--hidden')\n    if (withoutHiddenClass) {\n      document.body.style.paddingRight = bodyPaddingRight\n    }\n  }\n  watch(trigger, (val) => {\n    if (!val) {\n      cleanup()\n      return\n    }\n\n    withoutHiddenClass = !hasClass(document.body, 'el-popup-parent--hidden')\n    if (withoutHiddenClass) {\n      bodyPaddingRight = document.body.style.paddingRight\n      computedBodyPaddingRight = parseInt(\n        getStyle(document.body, 'paddingRight'),\n        10\n      )\n    }\n    scrollBarWidth = getScrollBarWidth()\n    const bodyHasOverflow =\n      document.documentElement.clientHeight < document.body.scrollHeight\n    const bodyOverflowY = getStyle(document.body, 'overflowY')\n    if (\n      scrollBarWidth > 0 &&\n      (bodyHasOverflow || bodyOverflowY === 'scroll') &&\n      withoutHiddenClass\n    ) {\n      document.body.style.paddingRight = `${\n        computedBodyPaddingRight + scrollBarWidth\n      }px`\n    }\n    addClass(document.body, 'el-popup-parent--hidden')\n  })\n  onScopeDispose(() => cleanup())\n}\n"],"names":["isRef","hasClass","getStyle","getScrollBarWidth"],"mappings":";;;;;;;;;MAkBa,gBAAgB,CAAC,YAA0B;AACtD,MAAI,CAACA,UAAM,UAAU;AACnB,qBACE,mBACA;AAAA;AAGJ,MAAI,iBAAiB;AACrB,MAAI,qBAAqB;AACzB,MAAI,mBAAmB;AACvB,MAAI,2BAA2B;AAE/B,QAAM,UAAU,MAAM;AACpB,oBAAY,SAAS,MAAM;AAC3B,QAAI,oBAAoB;AACtB,eAAS,KAAK,MAAM,eAAe;AAAA;AAAA;AAGvC,YAAM,SAAS,CAAC,QAAQ;AACtB,QAAI,CAAC,KAAK;AACR;AACA;AAAA;AAGF,yBAAqB,CAACC,aAAS,SAAS,MAAM;AAC9C,QAAI,oBAAoB;AACtB,yBAAmB,SAAS,KAAK,MAAM;AACvC,iCAA2B,SACzBC,aAAS,SAAS,MAAM,iBACxB;AAAA;AAGJ,qBAAiBC;AACjB,UAAM,kBACJ,SAAS,gBAAgB,eAAe,SAAS,KAAK;AACxD,UAAM,gBAAgBD,aAAS,SAAS,MAAM;AAC9C,QACE,iBAAiB,yBACG,kBAAkB,aACtC,oBACA;AACA,eAAS,KAAK,MAAM,eAAe,GACjC,2BAA2B;AAAA;AAG/B,iBAAS,SAAS,MAAM;AAAA;AAE1B,qBAAe,MAAM;AAAA;;;;"}